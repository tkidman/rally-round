<script>
    function openMobileNav() {
        closeNav("seriesMobileNav");
        openNav("mobileNav");
    }

    function openSeriesMobileNav() {
        closeNav("mobileNav");
        openNav("seriesMobileNav");
    }

    function closeNav(navId) {
        var x = document.getElementById(navId);
        x.className = x.className.replace(" w3-show", "");
    }

    function openNav(navId) {
        var x = document.getElementById(navId);
        if (x.className.indexOf("w3-show") == -1) {
            x.className += " w3-show";
        } else {
            closeNav(navId);
        }
    }

    // When the user clicks on div, open the popup
    function openPopup(id) {
        var popup = document.getElementById(id);
        popup.classList.toggle("show");
    }

    document.addEventListener("DOMContentLoaded", function () {
        const table = document.getElementById("tableDrivers");
        const headers = table.querySelectorAll("th");
        let sortOrder = 1; // 1 for ascending, -1 for descending

        // Sort the first column in ascending order on page load
        sortTableByColumn(table, 0, 1);
        updateHeaderStyles(headers, headers[0], 1);

        headers.forEach((header, index) => {
            header.addEventListener("click", () => {
                sortTableByColumn(table, index, sortOrder);
                updateHeaderStyles(headers, header, sortOrder);
                sortOrder *= -1; // Toggle sort order
            });
        });

        function sortTableByColumn(table, columnIndex, order) {
            const tbody = table.querySelector("tbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));

            rows.sort((rowA, rowB) => {
                const cellA = getCellValue(rowA.children[columnIndex]);
                const cellB = getCellValue(rowB.children[columnIndex]);

                const isNumberA = !isNaN(cellA);
                const isNumberB = !isNaN(cellB);

                if (cellA === "" && cellB === "") return 0;
                if (cellA === "") return -1 * order;
                if (cellB === "") return 1 * order;

                if (isNumberA && isNumberB) {
                    return (parseFloat(cellA) - parseFloat(cellB)) * order;
                } else if (isNumberA) {
                    return 1 * order;
                } else if (isNumberB) {
                    return -1 * order;
                } else {
                    return cellA.localeCompare(cellB) * order;
                }
            });

            rows.forEach(row => tbody.appendChild(row));
        }

        function getCellValue(cell) {
            const img = cell.querySelector("img");
            if (img) {
                return img.alt.toLowerCase();
            }
            const text = cell.innerText.toLowerCase();
            if (text === '=') {
                return '0';
            }
            return text;
        }

        function updateHeaderStyles(headers, sortedHeader, order) {
            headers.forEach(header => {
                header.classList.remove("sorted-asc", "sorted-desc");
            });
            sortedHeader.classList.add(order === 1 ? "sorted-asc" : "sorted-desc");
        }
    });

</script>
